const kelimeler = ["adres", "akrep", "avize", "babac", "balÄ±k", "bavul", "bedel", "bebek", "bekÃ§i", "belge", "biber", "bisik", "bulut", "bunak", "bÃ¼vet", "caddi", "cephe", "cilal", "cÃ¼ppe", "Ã§arÄ±k", "Ã§ayÄ±r", "Ã§ekme", "Ã§elik", "Ã§erÃ§e", "Ã§iÃ§ek", "davet", "dikme", "dinle", "duvak", "dÃ¼men", "dÃ¼ÅŸÃ¼k", "emzik", "etkin", "fakat", "felse", "filiz", "fÄ±rÃ§a", "gÃ¶ÄŸÃ¼s", "gÃ¼neÅŸ", "gÃ¶zÃ¼k", "haber", "harek", "havlu", "hazÄ±r", "ilgin", "insan", "istik", "iÅŸlek", "kalem", "kayÄ±k", "kazÄ±k", "kepÃ§e", "kilit", "kÄ±vam", "kÃ¼tÃ¼k", "laÃ§ka", "lamba", "lazÄ±m", "limon", "lÃ¼zum", "makin", "masal", "mecra", "mevzu", "mÃ¼rek", "mÄ±sÄ±r", "mÃ¼ÅŸer", "niyet", "nazik", "nÃ¼fus", "nÃ¼sha", "Ã¶ÄŸren", "Ã¶zgÃ¼r", "Ã¶zlem", "paket", "pazar", "pilav", "plaka", "porsu", "radyo", "ramak", "resto", "ruhlu", "sakÄ±z", "salon", "sandÄ±", "sapÄ±k", "sebze", "sÄ±cak", "sifon", "silgi", "sÄ±Ã§ra", "sokak", "sorun", "soyut", "sÃ¼tun", "ÅŸakak", "ÅŸeker", "ÅŸikay", "ÅŸÃ¶hre", "ÅŸÃ¼phe", "takas", "takÄ±m", "telci", "temel", "temiz", "tezga", "tÃ¼ken", "uÄŸrun", "unvan", "uslan", "uygun", "uyruk", "Ã¼cret", "Ã¼stÃ¼n", "Ã¼zgÃ¼n", "Ã¼zeri", "vapur", "vefat", "vurgu", "vuruÅŸ", "yaban", "yakÄ±n", "yamuk", "yardÄ±", "yavru", "yazÄ±k", "yedek", "yenik", "yerel", "yeten", "yosma", "yozla", "yufka", "yulaf", "yunus", "yÃ¼rek", "yÃ¼zme", "zabÄ±t", "zaman", "zarar", "zatÃ¼r", "zebra", "zemin", "zorun", "zÃ¼ppe", "Ã§akÄ±l", "Ã§alÄ±m", "Ã§anak", "Ã§avuÅŸ", "Ã§ekim", "Ã§evir", "Ã§iftÃ§", "Ã§ilek", "Ã§imen", "Ã§inko", "Ã¶zdeÅŸ", "ÅŸapel", "ÅŸapka", "ÅŸarap", "ÅŸemsi", "ÅŸofÃ¶r", "ÅŸÃ¶miz", "ÅŸÃ¶val", "ÅŸÄ±mar", "takat", "taksi", "taraf", "tavÄ±r", "teker", "temas", "tenis", "tesis", "tetik", "tÄ±rtÄ±", "turiz", "turta", "tutum", "tuzak", "tutku", "uzaÄŸa", "Ã¼mmet", "Ã¼rkek", "Ã¼ÅŸÃ¼me", "vurum", "yaÄŸlÄ±", "yaman", "yarar", "yargÄ±", "yatak", "yayÄ±k", "yazar", "yemek", "yemen", "yenek", "yerin", "yÄ±lan", "yÄ±ldÄ±", "yumuÅŸ", "yutma", "zahit", "zaten", "zehir", "zeval", "zevki", "zorla", "zulÃ¼m", "Ã§alan", "Ã§apak", "Ã§arÅŸa", "Ã§atma", "Ã§elen", "Ã§elme", "Ã§Ä±kma", "Ã§Ä±tak", "Ã§Ä±rak", "Ã§irke", "Ã¶zene", "ÅŸahsi", "ÅŸarkÄ±", "bahar", "cÄ±vÄ±k", "dÃ¶vme", "elmas", "fÄ±rat", "gÃ¶vde", "hÄ±rka", "tÃ¼nel", "zirve", "abone", "bakÄ±r", "ceket", "dudak", "fizik", "gÃ¶bek", "hafÄ±z", "namlu", "rakam", "tÃ¼rbe", "vagon", "acemi", "balta", "dolap", "eÅŸarp", "fÄ±rÄ±n", "Ä±rmak", "meyve", "nisan", "pasta", "sÄ±kma", "takoz", "vites", "yakut", "afyon", "baskÄ±", "duman", "gitar", "havuz", "mezar", "nokta", "pamuk", "talaÅŸ", "Ã¼nlem", "yanÄ±k", "zamir", "baÅŸka", "dalga", "hatun", "Ä±slak", "japon", "noter", "sabah", "tartÄ±"];
const rows = document.querySelectorAll('.row');
let WORD = generateWord().toLowerCase();
console.log("ðŸš€ ~ WORD:", WORD)


let WIN = false;

let currentRowIndex = 0;
let currentCellIndex = 0;

const ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÃ¼ÄŸÅŸÃ§Ä±ÃœÄžÅžÃ‡IÃ–Ã¶'.split('');



document.addEventListener("keydown", function (event) {
  if (WIN !== false) return;
  if (!ALPHABET.includes(event.key)) return;
  if (currentCellIndex > 5 || currentRowIndex > 5) {
    alert("KAYBETTÄ°N. KELÄ°ME: " + WORD)
    window.location.reload();
  }

  const currentRow = rows[currentRowIndex];
  const currentCel = currentRow.querySelector(`.cell:nth-child(${currentCellIndex + 1})`);

  currentCel.classList.add("animated");
  currentCel.classList.add("animatedFadeInUp");
  currentCel.classList.add("fadeInUp");
  setTimeout(() => {
    currentCel.classList.remove("animated");
    currentCel.classList.remove("animatedFadeInUp");
    currentCel.classList.remove("fadeInUp");
  }, 1000);
  currentCel.textContent = event.key;

  if (currentCellIndex === 4) {
    checkWord();
    currentCellIndex = 0;
    currentRowIndex++;
  } else {
    currentCellIndex++;
  }
});



const checkWord = () => {
  const currentRow = rows[currentRowIndex];
  const currentCels = currentRow.querySelectorAll('.cell');
  let inWord = '';
  for (let i = 0; i < currentCels.length; i++) {
    inWord += currentCels[i].innerText;
  }
  inWord = inWord.trim().toLowerCase();
  if (inWord === WORD) {
    alert('You win!');
    WIN = true;
    currentRow.classList.add("win")
  }
  else {
    for (let i = 0; i < WORD.length; i++) {
      WORD[i] === inWord[i] ? currentCels[i].classList.add("rightPlace") : (WORD.includes(inWord[i]) ? currentCels[i].classList.add("rightLetter") : null);
    }
  }

}


const clearGrid = () => {
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    row.classList.remove("win");
    const cells = row.querySelectorAll('.cell');
    for (let j = 0; j < cells.length; j++) {
      cells[j].textContent = '';
      cells[j].classList.remove("rightPlace");
      cells[j].classList.remove("rightLetter");
    }
  }
  currentRowIndex = 0;
  currentCellIndex = 0;

  WORD = generateWord();
}



document.getElementById('reset').addEventListener('click', () => {
  clearGrid();
  WIN = false;
  window.location.reload();
})

function generateWord() {
  let wrdIndex = Math.floor(Math.random() * kelimeler.length);
  return kelimeler[wrdIndex];
}

